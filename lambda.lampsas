(load "Prelude.lampas")

(define prog "(λaa)(λaa)")

(define (call lda rest) ())

(define (eatParens expr) 
  (if 
    (eq? (head expr) ")") 
    (list "" (tail expr))
    (list 
      (strconcat 
        (head expr) 
        (car (eatParens (tail expr))))
      ((compose car cdr) 
        (list (eatParens (tail expr)))))))
    
(define (head string) ((compose car string->list) string))
(define (tail string) ((compose* list->string cdr string->list) string))
(define (parseExpr expr) 
  (if 
    (eqv? (head expr) "λ") 
    (list 
      'lambda 
      ((compose head tail) (list expr))
      (parse ((compose tail tail) (list expr))))
    expr))
(define (parseParen expr)
  (if 
    (equal? "" (car (cdr (eatParens (tail expr)))))
    (parse (car (eatParens (tail expr))))
    (list
      (parse (car (eatParens (tail expr))))
      (parse (car (cdr (eatParens (tail expr))))))))
(define (parse expr) 
  (if 
    (eqv? (head expr) "(") 
    (parseParen expr)
    (parseExpr expr)))
(define (eval expr)
  (if 
    (equal? (car expr) 'lambda)
    (lambda (x) (id x))
    ((eval (car expr)) 
      (eval (car (cdr expr))))))
 

(write (eval (parse prog)))