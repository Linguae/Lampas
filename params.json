{"name":"Lampas","tagline":"A Lisp dialect","body":"# A Lisp\r\nLampas is my first Lisp; currently its unique features include continuations, macros, and some syntactic sugar.\r\n\r\n## Flagship Features\r\nMacros allow for methods to be specified that will manipulate any S-Expressions which they begin. That is, if `a` were a macro, any S-Expression led with `a` would be passed to the macro definition prior to evaluation; an example is below. \r\n\r\nContinuations were defined purely with macros. The general workflow of a continuation is to initiate a continuation statement with `begincc`, and then in the context of the statement, where the value of interest is present, to call `call/cc` with a lambda taking a continuation as a parameter. That continuation can then be set to a variable for later calling, and an initial value should be returned. Upon calling the continuation, values should be quoted (for now).\r\n\r\n```scheme\r\n[1 2 3]\r\n\"=> (1 2 3)\"\r\n\r\n({|x| (+ 1 x)} 5)\r\n\"=> 6\"\r\n\r\n(defmacro \r\n  (let name val body) \r\n  `((lambda (,name) ,body) ,val))\r\n(let a 5 (cons a 2))\r\n\"=> (5 2)\"\r\n\r\n(define print 5)    \r\n((lambda \r\n  (x) \r\n  (begincc \r\n    (write \r\n      (call/cc {|cc| (set! print cc) x}))))\r\n5)\r\n(print '(+ x 1))\r\n\"=> 5\r\n => 6\"\r\n```\r\n\r\nCompilation\r\n-----------\r\nCompile the source using GHC and the Existential flag.\r\n\r\n```sh\r\n$ ghc Main.hs -XExistentialQuantification\r\n```\r\n\r\nOr, if on a Unix machine, run the build script which will compile, test, and clean-up. Support for Windows will be added soon.\r\n\r\n```sh\r\n$ ./build.sh\r\n```\r\n\r\nBuild Script\r\n------------\r\nFor the build script to generate documentation, it requires node.js and docco. However, if this aspect is removed it merely requires GHC.\r\n\r\nThe build script generates documentation, compiles all sources, removes intermediary compilation files, and then runs the test suite. All test results are of the following form in the terminal.\r\n\r\n```scheme\r\n\"# Output (= `Hello`)\"\r\n\"Hello\"\r\n```\r\n\r\nWhere the asserted value is named with appropriate value in parenthesis. Tests serve to prevent unknown breaking of features.\r\n\r\nUsage\r\n-----\r\nThen run the interpreter either with a program as a parameter or individually to fire up a REPL.\r\n\r\n```sh\r\n$ ./lampas\r\nLampas >>\r\n```\r\n\r\n```sh\r\n$ ./lampas test.lampas\r\n```\r\n\r\nInclude the library functions with the following.\r\n\r\n```sh\r\n(load \"Prelude.lampas\")\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}