(load "Prelude.lampas")

" Output to console
"
(write "Hello")

" vararg compose and read from file
"
((compose* write read open-input-file) "test.lampas")

" list->string, string->list and concatenation 
"
(write (list->string (concat (string->list "Hello") (string->list "World"))))

" closure
"
(define fn {|x| {|y| (+ x y)}})
(write ((fn 5) 6))

" variables and function definition/application
"
(define x 3)
(define (f x y) (sum x y))
(f 1 x)

" eval function
"
(write (eval '(cons 1 2)))

" recursion
"
(define (fact n) 
  (if 
    (eqv? n 0) 
    1 
    (* (fact (- n 1)) n)))
(write (fact 3)) 

" hygienic macros
"
(define a 5)
(define-syntax test {|expr| (cons 'list (cdr expr))})
(define (b a) (test a))
(write (b 3))

" quasiquotes
"
(define c 3)
(write `(c ,c c ,c))

"  quasiquotes + macros = <3
"" TODO: make eval built-in to macros
"
(define-syntax let {|expr| `((lambda (,(cadr expr)) ,(cadddr expr)) ,(caddr expr))})
(eval (let a 5 (cons a 2)))