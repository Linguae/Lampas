(load "Prelude.lampas")

" Output to console
"
(write "# Output (= `Hello`)")
(write "Hello")

" vararg compose and read from file
"
(write "# Chained Operations and File IO (= `(load `Prelude.lampas`)`)")
((compose* write read open-input-file) "test.lampas")

" list->string, string->list and concatenation 
"
(write "# String-List Conversion (= `HelloWorld`)")
(write (list->string (concat (string->list "Hello") (string->list "World"))))

" closure
"
(define fn {|x| {|y| (+ x y)}})
(write "# Closures for Nested Lambdas (= 11)")
(write ((fn 5) 6))

" variables and function definition/application
"
(define x 3)
(define (f x y) (sum x y))
(f 1 x)

" eval function
"
(write "# Evaluation of Quoted Exprs. (= (1 . 2))")
(write (eval '(cons 1 2)))

" recursion
"
(define (fact n) 
  (if 
    (eqv? n 0) 
    1 
    (* (fact (- n 1)) n)))
(write "# Recursive Patterns (= 6)")    
(write (fact 3)) 

" hygienic macros with varargs
"
(define a 5)
(defmacro (test . vals) `(cons ,a ,(car vals)))
(write "# Hygienic Macros with Variable Arity (= (5 . 3))")
(write ({|a| (test 3)} 3))

" quasiquotes
"
(define c 3)
(write "# Quasiquotes with Unquoting (= c 3 c 3)")
(write `(c ,c c ,c))

"  quasiquotes + macros = <3
"
(defmacro (let name val body) `((lambda (,name) ,body) ,val))
(write "# Macros with Quasiquotes (= (5 . 2))")
(write (let a 5 (cons a 2)))

" continuations done purely with macros + eval
"
(define print 5)    
(write "# Macro Defined Continuations (= initial \ second \ third)")
(begincc (write (call/cc {|cc| (set! print cc) 'initial})))
(print ''second)
(print ''third)

"  environment exposed to macros
"
(defenvmacro (readmac env x) `(quote ,(car (reverse env))))
(write "# Exposed Environments (= (`atom?` <primitive>))")
(write (readmac 1))

" Evaluation with Arbitrary Environment
"
(defenvmacro 
  (enveval env x) 
  (evalenv env x))
(write "# Env-Eval/Context-Keeping Macros (= 5)")  
({|x| (enveval x)} 5)